{"OpenItemCard":{"componentName":"OpenItemCard","sourceFile":"../../examples/OpenItemCard/OpenItemCard.jsx","codeSample":"\nimport { useBoardContext } from \"../../hooks/UseBoardContext.js\";\n\nconst monday = mondaySdk();\n\nconst OpenItemCard = () => {\n  const boardContext = useBoardContext()\n  const isLoading = boardContext.isLoading;\n  const { items } = boardContext.state;\n  return (\n    <div className=\"open-item-card-container feature-container\">\n      <RenderItems\n        isLoading={isLoading}\n        itemsData={items}\n        actionButtonContent=\"Open Card\"\n        action={(item) => {\n          monday.execute(\"openItemCard\", { itemId: item.id });\n        }}\n      />\n    </div>\n  );\n};"},"CreateItemCard":{"componentName":"CreateItemCard","sourceFile":"../../examples/CreateItemCard/CreateItemCard.jsx","codeSample":"\nimport { useBoardContext } from \"../../hooks/UseBoardContext.js\";\n\nconst createItemCardConstants = {\n    instructionsParagraphs: [\n      `Opens a modal to create a new item on the board.`, \n      `Useful when you want users to create items without building the logic yourself.`, \n    ],\n    instructionslinkToDocumentation: `https://developer.monday.com/apps/docs/mondayexecute#opencreateitemdialog`,\n    instructionsListItems: [\n      `Select any item and click \"Create new item\"`,\n      `The app will call monday.execute(\"openCreateItemDialog\") with the current board's ID.`,\n      `Fill out the item's column values, and the new item will appear at the top of the board.`,\n    ],\n    codeSample: CodeSamples.CreateItemCard.codeSample,\n  };\n  \n\nconst monday = mondaySdk();\n\nconst CreateItemCard = () => {\n  const boardContext = useBoardContext()\n  const isLoading = boardContext.isLoading;\n  const { items, boardId } = boardContext.state;\n\n  return (\n    <div className=\"create-item-card-container feature-container\">\n      <RenderItems\n        isLoading={isLoading}\n        itemsData={items}\n        actionButtonContent=\"Create New Item\"\n        action={(item) => {\n          monday.execute(\"openCreateItemDialog\", { boardId });\n        }}\n      /> \n    </div>\n  );\n};"},"Confirmation":{"componentName":"Confirmation","sourceFile":"../../examples/Confirmation/Confirmation.jsx","codeSample":"\nconst monday = mondaySdk();\n\nconst AttentionBoxSwitcher = ({ confirmed }) => {\n  return (\n    confirmed ?\n      <AttentionBox type=\"success\" title=\"Confirmed\" text=\"User accepted the confirm dialog\" /> \n      : <AttentionBox type=\"danger\" title=\"Denied\" text=\"User declined the confirm dialog\" />\n  )\n}\n\nconst Confirmation = () => {\n  const [confirmed, setConfirmed] = useState(false);\n  const [showMessage, setShowMessage] = useState(false);\n\n  const handleConfirmation = () => {\n    monday\n      .execute(\"confirm\", {\n        message: \"Do you confirm?\",\n        confirmButton: \"Yes\",\n        cancelButton: \"No\",\n        excludeCancelButton: false,\n      })\n      .then((res) => {\n        setConfirmed(res.data.confirm);\n        setShowMessage(true);\n        setTimeout(() => {\n          setShowMessage(false);\n        }, 2000);\n      });\n  };\n\n  return (\n    <div className=\"confirmation-container feature-container\">\n          {!showMessage\n            ? <Button onClick={handleConfirmation}>\n              Click Me\n            </Button>\n            : <AttentionBoxSwitcher confirmed={confirmed} />}\n    </div>\n  );\n};"},"Notice":{"componentName":"Notice","sourceFile":"../../examples/Notice/Notice.jsx","codeSample":"\nconst monday = mondaySdk();\n\nconst Notice = () => {\n  const handleNotice = (type, text) => {\n    monday.execute(\"notice\", {\n      message: `${text} message`,\n      type: type,\n      timeout: 3000,\n    });\n  };\n\n  const notices = [\n    {\n      text: \"Success\",\n      type: \"success\",\n      color: \"positive\",\n    },\n    {\n      text: \"Info\",\n      type: \"info\",\n      color: \"primary\",\n    },\n    {\n      text: \"Error\",\n      type: \"error\",\n      color: \"negative\",\n    },\n  ]\n\n  return (\n    <div className=\"notice-container feature-container\">\n      <div className=\"notice-content working-with-the-board-items playground\">\n        {notices.map(({ type, text, color }) => (\n          <Button className=\"confirm-button\" color={color} onClick={() => handleNotice(type, text)}>\n            {text} Notice\n          </Button>\n        ))}\n      </div>\n    </div>\n  );\n};"},"OpenSettingsPane":{"componentName":"OpenSettingsPane","sourceFile":"../../examples/OpenSettingsPane/OpenSettingsPane.jsx","codeSample":"\nconst monday = mondaySdk();\n\nconst OpenSettingsPane = () => {\n    const [isPaneOpen, setIsPaneOpen] = useState(true);\n\n  const handleOpenSettings = (type, text) => {\n    monday.execute(\"openSettings\")\n    setIsPaneOpen(true);\n  };\n\n  const handleCloseSettings = (type, text) => {\n    monday.execute(\"closeSettings\")\n    setIsPaneOpen(false);\n  };\n\n  useEffect(() => {\n    monday.execute(\"openSettings\");\n    return () => {\n      monday.execute(\"closeSettings\");\n    }\n  }, [])\n\n  return (\n    <div className=\"open-settings-container feature-container\">\n      <div className=\"open-settings working-with-the-board-items playground\">\n        <div className=\"playground no-border\">\n          {!isPaneOpen \n          ? <Button onClick={handleOpenSettings}>\n            Toggle settings pane\n          </Button>\n          : <Button onClick={handleCloseSettings}>\n            Toggle settings pane\n            </Button>}\n        </div>\n      </div>\n    </div>\n  );\n};"},"FilePreview":{"componentName":"FilePreview","sourceFile":"../../examples/FilePreview/FilePreview.jsx","codeSample":"\nconst FilePreviewSample = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const boardData = useGetBoardData();\n  const [fileColumns, setFileColumns] = useState([]);\n  const [itemsToRender, setItemsToRender] = useState([]);\n\n  function handleAddFileColumn() {\n    console.log('file clicked')\n    monday.execute('notice',\n      {\n        message: `You need to add a file column to the board before using this example.`,\n        type: \"error\",\n        timeout: 3000,\n      });\n    // monday.api(`mutation ($boardId: ID!) {\n    //     create_column(board_id:$boardId, column_type:file, title:\"Files\") {\n    //       id\n    //       title\n    //     }\n    //   }`, {\n    //     boardId: boardData.boards[0].id\n    //   })\n  }\n\n  function handleActionClick(item) {\n    const fileColumnId = fileColumns[0].id;\n    const fileColumnValue = JSON.parse(\n      item.column_values.filter((x) => x.id === fileColumns[0].id)[0]\n        .value\n    );\n    const assetId = fileColumnValue?.files[0]?.assetId ?? null;\n    const boardId = boardData.boards[0].id;\n    if (!assetId) {\n      monday.execute(\"notice\", {\n        message: \"No files uploaded. Uploading now...\",\n      });\n      monday.execute(\"triggerFilesUpload\", {\n        boardId,\n        itemId: item.id,\n        columnId: fileColumnId,\n      });\n    } else {\n      monday.execute(\"openFilesDialog\", {\n        boardId,\n        itemId: item.id,\n        columnId: fileColumnId,\n        assetId,\n      });\n    }\n  }\n\n  useEffect(() => {\n    if (boardData.boards) {\n      setFileColumns(\n        boardData.boards[0].columns.filter((x) => x.type === \"file\")\n      );\n      setIsLoading(false);\n    }\n  }, [boardData]);\n\n  useEffect(() => {\n    if (fileColumns.length != 0) {\n      console.log({fileColumns});\n      const tableItems = boardData.boards[0].items_page.items.map((item) => {\n        const fileColumnValue = JSON.parse(\n          item.column_values.filter((x) => x.id === fileColumns[0].id)[0]\n            .value\n        );\n        const assetId = fileColumnValue?.files[0]?.assetId ?? null;\n        const hasAsset = !!assetId;\n        return {\n          hasAsset,\n          ...item\n        }\n      })\n      setItemsToRender(tableItems)\n    }\n  }, [fileColumns])\n\n  const tableColumns = [{\n    id: 'name',\n    title: 'Item name',\n    width: {min: 150},\n  },\n  {\n    id: 'action_button',\n    title: 'Action',\n    width: {min: 150},\n  }\n  ]\n\n  return (\n    <div>\n      {isLoading ? (\n        <Loader size={16} />\n      ) : fileColumns.length > 0 ? (\n        <>\n          <Table dataState={{isLoading}} columns={tableColumns} withoutBorder>\n            <TableHeader>\n              {tableColumns.map((headerCell, index) => <TableHeaderCell key={index} title={headerCell.title} />)}\n            </TableHeader>\n            <TableBody>\n              {itemsToRender.map(rowItem => <TableRow key={rowItem.id}>\n                <TableCell>{rowItem.name}</TableCell>\n                <TableCell>\n                  <Button size={Button.sizes.SMALL} onClick={() => {handleActionClick(rowItem)}}>\n                    {\n                      rowItem.hasAsset ? \"Open file\" : \"Upload file\"\n                    }</Button>\n                </TableCell>\n              </TableRow>)}\n            </TableBody>\n          </Table>\n        </>\n      ) : (\n        <Button onClick={handleAddFileColumn}>Add file column</Button>\n      )}\n    </div>\n  );\n};"},"DeleteItem":{"componentName":"DeleteItem","sourceFile":"../../examples/DeleteItem/DeleteItem.jsx","codeSample":"\nconst monday = mondaySdk();\n\nconst DeleteItem = () => {\n  const boardContext = useBoardContext();\n  const isLoading = boardContext.isLoading;\n  const { items, boardName, updateItems } = boardContext.state;\n\n  const deleteItem = (item) => {\n    monday\n      .api(deleteItemConstants.deleteItemAndGetUpdatedBoardItemsQuery, {\n        variables: { itemId: +item.id },\n      })\n      .then((res) => {\n        updateItems({\n          items: res.data.delete_item.board.items_page.items,\n          boardName,\n          updateItems,\n        });\n      });\n  };\n\n  return (\n    <div className=\"delete-item-container feature-container\">\n      <RenderItems\n        isLoading={isLoading}\n        itemsData={items}\n        actionButtonContent=\"Delete me\"\n        action={(item) => {\n          monday\n            .execute(\"confirm\", {\n              message: `Are you sure you want to delete the item ${item.name} (This item will be actually deleted from you board)?`,\n              confirmButton: \"Delete\",\n              cancelButton: \"Cancel\",\n              excludeCancelButton: false,\n            })\n            .then((res) => {\n              res.data.confirm &&\n                monday.execute(\"notice\", {\n                  message: \"Item has been deleted successfully\",\n                  type: \"success\",\n                  timeout: 10000,\n                }) &&\n                deleteItem(item);\n            });\n        }}\n      />\n    </div>\n  );\n};"},"StorageApi":{"componentName":"StorageApi","sourceFile":"../../examples/StorageApi/StorageApi.jsx","codeSample":"\nconst monday = mondaySdk();\n\nconst StorageApi = () => {\n  const { items } = useBoardContext().state;\n  const [favouriteItems, setFavouriteItems] = useState([]);\n\n  useEffect(() => {\n    monday.storage.instance.getItem(\"FAVOURITE_ITEMS\").then((res) => {\n      if (!res.data?.value || !res.data?.success) {\n        monday.storage.instance.setItem(\"FAVOURITE_ITEMS\", JSON.stringify([]));\n        return;\n      } else {\n        setFavouriteItems(JSON.parse(res.data?.value));\n      }\n    });\n\n    monday.execute(\"notice\", {\n      message: \"Click on the heart icon to mark item as favourite or to remove one\",\n      type: \"info\",\n      timeout: 10000,\n    });\n  }, []);\n\n  const changeItemFavouriteState = (itemId, desiredFavouriteState) => {\n    let updatedFavourites = [...favouriteItems];\n    if (desiredFavouriteState) {\n      if (!favouriteItems.includes(+itemId)) {\n        updatedFavourites.push(+itemId);\n      }\n    } else {\n      updatedFavourites = updatedFavourites.filter((favouriteItemId) => {\n        return favouriteItemId !== +itemId;\n      });\n    }\n    monday.storage.instance.setItem(\"FAVOURITE_ITEMS\", JSON.stringify(updatedFavourites)).then((res) => {\n      if (res.data.success) {\n        setFavouriteItems(updatedFavourites);\n      }\n    });\n  };\n\n  return (\n    <div className=\"storage-api-container feature-container\">\n      <div className=\"working-with-the-board-items playground\">\n        <h3 className=\"playground-header\">Playground</h3>\n        {items.map((item) => {\n          const isFavourite = favouriteItems.includes(+item.id);\n          return (\n            <Item\n              key={item.id}\n              item={item}\n              action={() => changeItemFavouriteState(item.id, !isFavourite)}\n              isFavourite={isFavourite}\n              backgroundColor={randomColorGenerator()}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};"},"GetAppContext":{"componentName":"GetAppContext","sourceFile":"../../examples/GetAppContext/GetAppContext.jsx","codeSample":"\nconst monday = mondaySdk();\n\nconst GetAppContext = () => {\n    const [showMessage, setShowMessage] = useState(0);\n    const [contextDataString, setContextDataString] = useState('');\n\n    const handleGetContext = async () => {\n        const appContext = await monday.get('context');\n        setContextDataString(JSON.stringify(appContext?.data, null, 2));\n        setShowMessage(true);\n    }\n\n    return (\n        <div className=\"get-context-container feature-container\">\n                {!showMessage \n                    ? (<Button className=\"button\" onClick={handleGetContext}>\n                    Show app context\n                      </Button>)\n                    : (<div className=\"code-block\"><CodeBlock contentText={contextDataString} /></div>)}\n            </div>\n        </div>\n    );\n}"},"GetWorkspaces":{"componentName":"GetWorkspaces","sourceFile":"../../examples/GetWorkspaces/GetWorkspaces.jsx","codeSample":"\nconst monday = mondaySdk();\n\nconst GetWorkspaces = () => {\n    const [workspaces, setWorkspaces] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [isError, setIsError] = useState(false);\n\n    useEffect(() => {\n        monday.api(\n            `query {\n            workspaces (limit:100) {\n                id\n                is_default_workspace\n                name\n                kind\n                users_subscribers (limit:500) {\n                    id  \n                }\n            }\n        } `)\n            .then((res) => {\n                console.log({ res });\n                setWorkspaces(res.data.workspaces);\n                setIsLoading(false);\n            })\n            .catch((err) => {\n                console.error(err);\n                setIsError(true);\n            });\n    }, [])\n\n    return (\n        <div className=\"get-workspaces-container feature-container\">\n            <div className=\"playground\">\n            <RenderWorkspaceTable\n                workspaces={workspaces}\n                isLoading={isLoading}\n                isError={isError}\n            />\n            </div>\n        </div>\n    );\n};"},"ListenToEvents":{"componentName":"ListenToEvents","sourceFile":"../../examples/ListenToEvents/ListenToEvents.jsx","codeSample":"\nconst monday = mondaySdk();\n\nconst ListenToEvents = () => {\n  const [eventsList, setEventsList] = useState([]);\n  const [mostRecentEvent, setMostRecentEvent] = useState({})\n  const [boardUrl, setBoardUrl] = useState('');\n\n  const handleNewEvent = async (evt) => {\n    monday.execute(\"notice\", {\n      message: `A new event happened! Type: ${evt.data.type}`\n    })\n    setEventsList([...eventsList, evt.data]);\n    setMostRecentEvent(evt.data);\n  }\n\n  const handleContextUpdate = async (context) => {\n    const boardIds = context?.data?.boardIds ?? [context?.data?.boardId];\n    const accountInfoQuery = await monday.api(`{ account { slug } }`);\n    const slug = accountInfoQuery?.data?.account?.slug;\n    if (!boardIds || !slug) {\n      setBoardUrl('https://monday.com');\n    }\n    setBoardUrl(`https://${slug}.monday.com/boards/${boardIds[0]}`);\n  }\n\n  useEffect(() => {\n    const eventsListener = monday.listen('events', handleNewEvent);\n    const contextListener = monday.listen('context', handleContextUpdate)\n\n    return () => {\n      eventsListener();\n      contextListener();\n    }\n  })\n\n  return (\n    <div className=\"events-listen-container feature-container\">\n        <TabComponent eventsList={eventsList} mostRecentEvent={mostRecentEvent} url={boardUrl} buttonIsLoading={!boardUrl}/>\n    </div>\n  );\n}"},"ListenToBoardFilter":{"componentName":"ListenToBoardFilter","sourceFile":"../../examples/ListenToBoardFilter/ListenToBoardFilter.jsx","codeSample":"\nconst monday = mondaySdk();\n\nconst ListenToBoardFilter = () => {\n  const [eventsList, setEventsList] = useState([]);\n  const [mostRecentEvent, setMostRecentEvent] = useState({})\n  const [filterState, setFilterState] = useState();\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const handleFilterChange = async (evt) => {\n    monday.execute('notice', {\n        message: `Item IDs changed - ${evt.data.length} items to show`\n    })\n    setFilterState(evt);\n  }\n\n  const handleSearchChange = async (evt) => {\n    monday.execute('notice', {\n        message: `Search term changed – ${evt.data.term}`\n    })\n    setSearchTerm(evt);\n  }\n\n  const debouncedHandleSearchChange = _.debounce(handleSearchChange, 500);\n  const debouncedHandleFilterChange = _.debounce(handleFilterChange, 500);\n\n\n  useEffect(() => {\n    const eventsListener = monday.listen('itemIds', debouncedHandleFilterChange);\n    const contextListener = monday.listen('filter', debouncedHandleSearchChange)\n\n    return () => {\n      eventsListener();\n      contextListener(); \n    }\n  }, [])\n\n  return (\n    <div className=\"events-listen-container feature-container\">\n        <TabComponent filterState={filterState} searchTerm={searchTerm}/>\n    </div>\n  );\n}"},"GetBoardItems":{"componentName":"GetBoardItems","sourceFile":"../../examples/GetBoardItems/GetBoardItems.jsx","codeSample":"\nconst monday = mondaySdk();\n\nconst GetBoardItems = () => {\n    const appContext = useAppContext();\n    const [items, setItems] = useState([])\n    const [boardColumns, setBoardColumns] = useState([])\n    const [isLoading, setIsLoading] = useState(true);\n    const [isError, setIsError] = useState(false);\n    let currentBoard = appContext?.data?.boardIds?.at(0) ?? appContext?.data?.boardId ?? null;\n\n    useEffect(() => {\n        if (currentBoard) { // only get items after context has been fetched\n            monday.api(\n                `query ($boardId: [ID!]) {\n                    boards(ids: $boardId) {\n                        id\n                        columns {\n                            id\n                            title\n                            type\n                        }\n                        items_page {\n                            items {\n                                id\n                                name\n                                column_values {\n                                    id\n                                    text\n                                    value\n                                    type\n                                }\n                            }\n                        }\n                    }\n                }`,\n                {\n                    variables: {\n                        boardId: currentBoard,\n                    }\n                })\n                .then((res) => {\n                    setBoardColumns(res.data.boards[0].columns);\n                    setItems(res.data.boards[0].items_page.items);\n                    setIsLoading(false);\n                })\n                .catch((err) => {\n                    setIsError(true);\n                    console.log({ err });\n                });\n        }\n    }, [currentBoard])\n\n    return (\n        <div className=\"get-items-container feature-container\">\n            <RenderItemsTable\n                items={items}\n                boardColumns={boardColumns}\n                isLoading={isLoading}\n                isError={isError}\n            />\n        </div>\n    );\n};"},"GetSettings":{"componentName":"GetSettings","sourceFile":"../../examples/GetSettings/GetSettings.jsx","codeSample":"\nconst monday = mondaySdk();\n\nconst GetSettings = () => {\n    const [currentSettings, setCurrentSettings] = useState({});\n\n    useEffect(() => {\n        monday.execute(\"openSettings\");\n        const listener = monday.listen(\"settings\", debouncedHandleSettingsChange);\n        return () => {\n            listener(); // unsubscribes to the listener\n        }\n    }, [])\n\n    const handleSettingsChange = (evt) => {\n        setCurrentSettings(evt);\n    }\n\n    const debouncedHandleSettingsChange = _.debounce(handleSettingsChange, 500);\n\n    return (\n        <div className=\"get-settings-container feature-container\">\n                <div className=\"code-block\">\n                    <CodeBlock contentText={JSON.stringify(currentSettings.data, null, 2)} />\n                </div>\n            </div>\n        </div>\n    );\n}"},"FilterBoardItems":{"componentName":"FilterBoardItems","sourceFile":"../../examples/FilterBoardItems/FilterBoardItems.jsx","codeSample":"\nconst monday = mondaySdk();\n\nconst FilterBoardItems = () => {\n    const [items, setItems] = useState([])\n    const appContext = useAppContext();\n    const isLoading = appContext.isLoading;\n    let currentBoard = appContext?.data?.boardIds?.at(0) ?? appContext?.data?.boardId ?? null;\n    const [filterState, setFilterState] = useState()\n    let filterRules = filterState?.data?.rules ?? [];\n\n    const handleFilterChange = async (evt) => {\n        setFilterState(evt);\n    }\n\n    const debouncedHandleFilterChange = _.debounce(handleFilterChange, 1000);\n\n    useEffect(() => {\n        const filterListener = monday.listen('filter', debouncedHandleFilterChange)\n        return () => {\n            filterListener(); // unsubscribe from listener\n        }\n    }, [])\n\n    useEffect(() => {\n        if (currentBoard) { // only get items after context has been fetched\n            monday.api(\n                `query ($boardId: [ID!], $rules:[ItemsQueryRule!]) {\n                    boards(ids: $boardId) {\n                        id\n                        items_page (query_params: { rules: $rules }) {\n                            items {\n                                id\n                                name\n                            }\n                        }\n                    }\n                }`,\n                {\n                    variables: {\n                        boardId: currentBoard, \n                        rules: filterRules\n                    }\n                })\n                .then((res) => {\n                    setItems(res.data.boards[0].items_page.items)\n                })\n                .catch((err) => {\n                    console.error({err});\n                });\n        }\n    }, [currentBoard, filterRules])\n\n    return (\n        <div className=\"feature-container\">\n            <RenderItems\n                isLoading={isLoading}\n                itemsData={items}\n            />\n        </div>\n    );\n};"},"UploadFileViaAPI":{"componentName":"UploadFileViaAPI","sourceFile":"../../examples/UploadFileViaAPI/UploadFileViaAPI.jsx","codeSample":"\nconst monday = mondaySdk();\n\nfunction handleAddFileColumn() {\n  monday.execute('notice', {\n    message: \"No file column found on board, please add one\",\n    type: \"error\",\n  })\n}\n\nconst FileUploadSample = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const boardData = useGetBoardData();\n  const [fileColumns, setFileColumns] = useState([]);\n\n  useEffect(() => {\n    if (boardData.boards) {\n      setIsLoading(false);\n      setFileColumns(\n        boardData.boards[0].columns.filter((x) => x.type === \"file\")\n      );\n    }\n  }, [boardData]);\n\n\n  return (\n    <div>\n      {isLoading ? (\n        <Loader size={16} />\n      ) : fileColumns.length > 0 ? (\n        <RenderItems\n          itemsData={boardData.boards[0].items_page.items}\n          actionButtonContent=\"Add or preview File\"\n          action={(item) => {\n            const fileColumnId = fileColumns[0].id;\n            const itemId = item.id;\n            const boardId = boardData.boards[0].id;\n          }}\n        />\n      ) : (\n        <Button onClick={handleAddFileColumn}>Add file column</Button>\n      )}\n    </div>\n  );\n};"},"Pagination":{"componentName":"Pagination","sourceFile":"../../examples/Pagination/Pagination.jsx","codeSample":"\nconst monday = mondaySdk();\n\nfunction itemsReducer(items, action) {\n  if (action.type === 'added') {\n    return [...items, ...action.itemsToAdd];\n  }\n}\n\nconst Pagination = () => {\n  const appContext = useAppContext();\n  const isLoading = useAppContext.isLoading;\n  const [items, dispatch] = useReducer(itemsReducer, [])\n  let currentBoard = appContext?.data?.boardIds?.at(0) ?? appContext?.data?.boardId ?? null;\n\n  useEffect(() => {\n    if (currentBoard) {\n      async function getItemsWithPagination() {\n        const boardIds = currentBoard;\n\n        // get first page of items\n        var items_page = await monday.api(`\n          query ($boardIds:[ID!]){\n            boards (ids:$boardIds) { \n              items_page (limit:1) {\n                cursor\n                items {\n                  name\n                  id\n                }\n              } \n            } \n          }`, { variables: { boardIds } });\n\n        // dispatch changes to items state\n        let itemsToAdd = items_page.data.boards[0].items_page.items;\n        dispatch({\n          type: 'added',\n          itemsToAdd\n        })\n\n        // set cursor & increment page\n        var cursor = items_page.data.boards[0].items_page.cursor;\n\n        // if cursor exists, retrieve next page\n        while (cursor) {\n          items_page = await monday.api(`\n            query ($cursor:String!){\n                next_items_page (limit:1, cursor:$cursor) {\n                  cursor\n                  items {\n                    name\n                    id\n                  }\n              } \n            }`, { variables: { cursor } });\n          let itemsToAdd = items_page.data.next_items_page.items;\n          dispatch({\n            type: 'added',\n            itemsToAdd\n          });\n          cursor = items_page.data.next_items_page.cursor;\n        }\n\n      }\n      try {\n        getItemsWithPagination();\n      } catch (err) {\n        console.error(err);\n      }\n    }\n  }, [currentBoard])\n\n  return (\n    <div className=\"get-items-container feature-container\">\n      <RenderItems\n        isLoading={isLoading}\n        itemsData={items}\n      />\n    </div>\n  );\n};"},"GetUpdates":{"componentName":"GetUpdates","sourceFile":"../../examples/GetUpdates/GetUpdates.jsx","codeSample":"\nconst monday = mondaySdk(); \n\nconst GetUpdates = () => {\n  const context = useBoardContext();\n  const isLoading = useBoardContext.isLoading;\n  const { items, boardId } = context.state;\n  const [selectedItem, setSelectedItem] = useState();\n  const [updatesData, setUpdatesData] = useState([]);\n\n  const noticeNoUpdatesForItem = () => {\n    monday.execute(`notice`, {\n      message: \"The selected item doesn`t have updates.\",\n      type: \"error\",\n      timeout: 10000,\n    });\n  };\n\n  function handleGetUpdates(boardId, item) {\n    monday.api(\n      `query ($board_id: [ID!], $item_id: [ID!]) {\n        boards(ids: $board_id) {\n          items_page(query_params: {ids:$item_id}) {\n            items {\n              updates {\n                id\n                text_body\n                body\n                creator {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n      }`, {\n      variables: { board_id: boardId, item_id: item.id },\n    }).then((res) => {\n      if (res.data.boards[0]?.items_page?.items[0]?.updates.length === 0) {\n        noticeNoUpdatesForItem();\n      } else {\n        const updatesData = res.data?.boards[0]?.items_page?.items[0]?.updates.map((update) => {\n          return { id: update.id, name: update.text_body };\n        });\n        setSelectedItem(item)\n        setUpdatesData(updatesData);\n      }\n    }).catch((err) => {\n      console.log(err);\n    });\n  }\n\n  return (\n    <div className=\"get-updates-items-container feature-container\">\n      <RenderItems\n        isLoading={isLoading}\n        itemsData={items}\n        actionButtonContent=\"Get Updates\"\n        action={(item) => {\n          handleGetUpdates(boardId, item)\n        }}\n        />\n      {updatesData.length > 0 && (\n        <div className=\"overlay\">\n          <DialogContentContainer className=\"popup\">\n            <Icon\n              icon={Close}\n              onClick={() => {\n                setSelectedItem();\n                setUpdatesData([]);\n              }}\n            />\n            <Heading className=\"overlay-header\">Updates of {selectedItem.name}</Heading>\n            <List>\n              {updatesData.map((update) => {\n                return <ListItem>{update.name}</ListItem>\n              })}\n            </List>\n          </DialogContentContainer>\n        </div>\n      )}\n    </div>\n  );\n};"}}